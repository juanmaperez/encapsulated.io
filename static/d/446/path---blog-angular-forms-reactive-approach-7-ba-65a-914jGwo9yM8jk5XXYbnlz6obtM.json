{"data":{"markdownRemark":{"html":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam metus orci, malesuada rutrum ligula in, feugiat ultricies mi. Pellentesque vel libero ut metus auctor vehicula quis sit amet neque. In hac habitasse platea dictumst. Aenean rutrum nunc elit, sit amet feugiat nisi pharetra id. Cras auctor nibh felis, eu accumsan turpis aliquet in. Vivamus interdum id erat a bibendum. In orci dui, congue eget fermentum sed, pellentesque eu mauris. Cras porta eros ligula, in ultrices augue ullamcorper vitae. Vestibulum efficitur, diam ac pulvinar blandit, tortor leo scelerisque nibh, in ornare mauris mi et ligula. Maecenas iaculis arcu ligula, ac mollis nisl lobortis eu. In hac habitasse platea dictumst. Morbi suscipit mi ac laoreet blandit. Aliquam auctor eros vel tincidunt scelerisque. Sed nulla mauris, aliquet nec arcu a, aliquet convallis ligula. Integer auctor nibh nec risus mattis fringilla.</p>\n<p>Ut quis feugiat ipsum, vel placerat urna. Donec lobortis at neque et sagittis. Phasellus hendrerit eros ac dapibus molestie. Duis ac maximus ante. Donec id est dictum, facilisis quam et, vestibulum diam. Curabitur accumsan ultricies quam et lobortis. Fusce ac accumsan ligula. Etiam rhoncus dolor nec orci consequat finibus. Vivamus sed mauris dapibus, laoreet neque eget, rhoncus velit. Nunc venenatis sapien aliquam nunc blandit, vel blandit mauris venenatis. Cras quis erat volutpat, venenatis mi vel, mollis mauris. Maecenas varius vitae diam vel facilisis. Integer tempor lacinia velit id lobortis. Maecenas vel varius diam. Donec et dui tempus, laoreet lorem in, molestie erat. Nulla mattis a neque eu pellentesque.</p>\n<p>Nullam justo mauris, convallis quis odio quis, elementum egestas velit. Pellentesque quis ultricies ante. Nulla finibus interdum tortor at semper. Nunc rutrum blandit mi sed bibendum. Morbi volutpat interdum purus ut fermentum. Pellentesque lobortis scelerisque lacus ac varius. Phasellus nec pharetra elit. Etiam ut sapien id odio accumsan pharetra id sed nisi. Cras porta sit amet massa id sollicitudin.</p>\n<p>Pellentesque pharetra orci in mollis interdum. Nullam auctor elit nec nisl mattis, quis luctus mi malesuada. Nulla ut nulla a leo ultricies blandit at ut tellus. Quisque eu velit vitae justo gravida consequat. Aliquam mollis eleifend urna, vel gravida ante tincidunt sed. Integer in vehicula lacus. Maecenas at ante dolor. Curabitur at pellentesque libero. Nam tempor nec sem non luctus. Donec ut elit eleifend, imperdiet lectus id, sagittis ex. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc mauris sem, rhoncus in tristique eget, condimentum cursus quam. Vestibulum tempor placerat elit a vestibulum. Suspendisse potenti.</p>\n<p>Phasellus vel mattis tellus, a rhoncus nisi. Maecenas facilisis rhoncus laoreet. Vestibulum convallis erat auctor nulla auctor blandit. Nunc vitae lectus sit amet leo commodo congue a id turpis. Cras vehicula vitae mi nec tincidunt. Praesent ac nisl ultrices nibh pulvinar ornare non vitae ipsum. Mauris sagittis nisi sed aliquet efficitur. Sed lectus ante, vulputate ac posuere in, dignissim id ex. Phasellus rhoncus tempus est sed accumsan. Quisque a massa non nunc lacinia auctor. Aenean at dolor lorem. Aliquam arcu massa, commodo id laoreet eu, laoreet et mauris. Duis venenatis mauris magna, et vulputate quam porttitor a.</p>","frontmatter":{"title":"Angular Forms: Reactive approach","date":"May, 23, 2018","path":"/blog/angular-forms-reactive-approach","tags":["javascript","angular","angular forms","template driven approach"],"excerpt":"Template Driven is the most common way to manage forms in Angular when you start to dive into this framework. Although It offers fewer features than the Reactive approximation, sometimes It could be very useful. Mainly for forms which don’t manage huge information.","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/a11b6cc04759a32d3a9ec12a13a9c841/7a298/angular_forms_2.jpg"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/400f9d04b95a30fefc2839dcc8e519e4/48c6d/angular.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>Template Driven is the most common way to manage forms in Angular when you start to dive into this framework. Although It offers fewer features than the Reactive approximation, sometimes It could be very useful. Mainly for forms which don’t manage huge information.</p>\n<p>In the Template Driven approach, your form is set in the template an Angular infers the form object from the DOM.</p>\n<p>Angular always detects the form tag in the HTML and automatically creates an Object to represent this element.</p>\n<p>But Angular doesn’t detect fields into the form and this behavior is for some reasons:</p>\n<ul>\n<li>maybe all inputs, selects or radios, etc must not be sent.</li>\n<li>Maybe we could have elements that only interacts with the UI.</li>\n<li>others.</li>\n</ul>\n<p>Then, the information that our form will save on its value must be added by us with the ngModel directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Submitting Form</h2>\n<p>We submit forms through ngSubmit event binding and normally a function fired through this event makes all work with our form.</p>\n<p>But we need first create a reference of this form which will be passed as a parameter into this function.</p>\n<p>We create this reference through the ngForm directive associated with a template reference variable (#myForm). Later, the reference it’s the element we pass into the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit(myForm)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">#myForm</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You didn’t add an NgForm directive.</p>\n<p>Angular did. Angular automatically creates and attachesan NgForm directive to the form tag.</p>\n<p>The NgForm directive supplements the form element with additional features. It holds the controls you created for the elements with an ngModel directive and name attribute and monitors their properties, including their validity. It also has its own valid property which is true only if every contained control is valid.</p>\n<p>The ngForm directive will create a javascript object automatically with all form data, which will be passed to the function in the template and received in the function declaration in the TypeScript file.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">form<span class=\"token punctuation\">:</span> NgForm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//log in the console the form data</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, thanks to ngForm we will access easily to all properties created from our form. Some of this properties allow us to interact with UI and know specific details and information about the form.</p>\n<ul>\n<li>Dirty: some values have changed</li>\n<li>Touched: some field was clicked</li>\n<li>Invalid: some validation rule wasn’t passed</li>\n<li>Status: general status of the form. For example, valid.</li>\n<li>Errors: errors returned by validation rules</li>\n</ul>\n<p>One pragmatic way to use these properties is to disable the submit button when the form is not valid.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">&lt;</span>button <span class=\"token punctuation\">[</span>disabled<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"!myForm.valid\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span> Submit <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2>Access to Form through ViewChild</h2>\n<p>We declared a template reference variable in our form tag which was assigned to ngForm. We can access this reference through the ViewChild decorator as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myForm'</span><span class=\"token punctuation\">)</span> myForm<span class=\"token punctuation\">:</span> NgForm</code></pre></div>\n<h2>Validation in the template</h2>\n<p>We can add to our form fields different validation rules with directives:</p>\n<ul>\n<li>required</li>\n<li>email</li>\n<li>maxlength</li>\n<li>pattern</li>\n</ul>\n<p>Thanks to these directives, Angular will add or remove some classes to the form that indicates how is the status at this moment: ng-invalid, ng-touched. Managing this classes we can return a visual feedback to the user to indicate when a value is not correct.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">email</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">  <span class=\"token selector\">input.ng-invalid.ng-touched</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Adding Error messages</h2>\n<p>Sometimes, a border red is not enough to indicate to the user what is wrong with this field. Then we should show the error with a message in a help box.</p>\n<p>To do this, we need a reference to this field that allows us to access to this field from any place on this template. We need to add to the input tag a template reference variable assigned to the ngModel directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">email</span> <span class=\"token attr-name\">#email</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngModel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Why “ngModel”? A directive’s exportAs property tells Angular how to link the reference variable to the directive. You set email to ngModel because the ngModel directive’s exportAs property happens to be ngModel.</p>\n<p>Now, we can show o hide a message that indicates if this field is valid or invalid related to the email property that references an ngModel directive for this field.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>help-block<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!email.valid and email.touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Email should be valid\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Setting default values with bindings</h2>\n<h3>One way data binding</h3>\n<p>We could set a default value for inputs through property binding. We can create a property in our ts file:</p>\n<p>public response: string = 'pet'\nAnd later we can make reference to this property from the template with a ngModel property binding with []</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[ngModel]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>Two-way data binding</h3>\n<p>Besides, we could want to make some validation the value introduced in the input. Or show this value in other places automatically. Two-way data binding with ngModel is how we should do this.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span>\n  \n  // we can show the value in other place\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{ response }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Grouping Form Controls</h2>\n<p>Maybe we could want to structure our object of values in the ngForm because we are looking for organizing all values in bigger forms.</p>\n<p>To do this we have to wrap our inputs which belong to the same group and add the directive</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user-data<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModelGroup</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">#userData</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngModelGroup<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">></span></span>\n        \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">email</span> <span class=\"token attr-name\">#email</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngModel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>help-block<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!email.valid &amp;&amp; email.touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please enter a valid Email<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As we can see above we can create a template reference variable for this ngModelGroup (#userData=”ngModelGroup”) to access to the object representation of this group and add error messages under the group.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!userData.valid &amp;&amp; userData.touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>UserData is not valid!!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Patching and setting values to forms</h2>\n<p>We have two different methods to insert values in a form setting all values for a form or patch only specific fields.</p>\n<p>Through the ViewChild decorator, we can create a representation of the form which has a template reference variable. After this, we can do different actions over this form from the typeScript file</p>\n<p>Set values in a complete form\nIn the case of set al values to the complete form, We can pass an object with the same structure that  form values property has:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myForm'</span><span class=\"token punctuation\">)</span> myForm<span class=\"token punctuation\">:</span> NgForm \n \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myForm<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          username<span class=\"token punctuation\">:</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span>\n          email <span class=\"token punctuation\">:</span><span class=\"token string\">'johndoe@gmail.com'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token punctuation\">:</span><span class=\"token string\">'My pet\\'s name was Rudolf'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Patch value in a specific form field</h2>\n<p>By another hand, we can only patch a value for an input or select.</p>\n<p>To do this, we use the patchValue function from form wrap.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myForm<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span><span class=\"token function\">patchValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jonh'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, this actions should be encapsulated in methods and we can execute them wherever we want: ngOnInit or after a user action with an event binding that fires this function, a button clicked for example.</p>","id":"e892ec5a-fa07-5b1d-97d8-dfe386dc2705","frontmatter":{"date":"May, 23, 2018","path":"/blog/angular-forms-template-driven-approach","title":"Angular Forms: Template Driven approach","excerpt":"Template Driven is the most common way to manage forms in Angular when you start to dive into this framework. Although It offers fewer features than the Reactive approximation, sometimes It could be very useful. Mainly for forms which don’t manage huge information.","tags":["javascript","angular","angular forms","template driven approach"],"type":"post","category":"angular","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/f13e622ca613a6677ffb06adcebf4bd1/7a298/angular_forms_1.jpg"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/400f9d04b95a30fefc2839dcc8e519e4/48c6d/angular.png"}}}}},"next":null}}