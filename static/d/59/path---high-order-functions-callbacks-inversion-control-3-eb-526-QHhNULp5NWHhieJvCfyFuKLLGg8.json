{"data":{"markdownRemark":{"html":"<p>Functions are one of the most important tool we have to make a task in Javascript. We can declare them and use them in different places of our application.</p>\n<p>We can use them for make operation such as calculate ten squared which is gonna return 100 every single time that we invoke that function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">tenSqured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">tenSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<p>And we could do this for every single calculation that we want, nine squared, eight squared, but creating functions in this way it would be hard to track and maintain, and we would be breaking the DRY rule (Don't repeat yourself).</p>\n<p>For that reason we should create functions based on functionalities, not in data. In that way we can declare a function which receives a number of parameters, and we must implement our code to handle that data in the way that our functionality requires.</p>\n<p>Let's say we create the function multiplyBy2, which receives a paramenter called num, which is the number we will be multiplying by 2, and the result of invoking that functino is going to be the same when the argument passed is the same value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 10</span>\n  <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span></code></pre></div>\n<h2>High order functions</h2>\n<p>High order functions are basically function that makes one of this two things </p>\n<ul>\n<li>returns a function</li>\n<li>receives a function as an argument.</li>\n</ul>\n<p>This functions are based on the same principle of functionality that is based our multiplyByTwo function but it goes a bit further as it can be pass the whole functionality as a parameter.</p>\n<p>Let's think about a function that receives an array and multiplies by two every single item in the array and return a new brand array with the results of those operations.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [4, 8, 12]</span></code></pre></div>\n<p>This function does its job but it's not reusable for multiplying by other number or maybe we want to addTwo instead of multiplying. </p>\n<p>That's when High order functions show their power allowing us to wrap the whole functionality into another function and pass it as an argument to be executed into the function.</p>\n<p>This functions that wraps the functionality and are passed into another function are called callbacks</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndModify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">copyAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> multiplyBy2<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [4, 8, 12]</span>\n  <span class=\"token function\">copyAndModify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addTwo<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// [4, 6, 8]</span></code></pre></div>\n<p>Converting the old copyAndMultiplyByTwo function in the high order function called copyAndModify we have avoided rewriting the for of loop for every single case that we would like to implement, and instead we only need to pass a callback function which is gonna decide what we are going to do with each result.</p>\n<h2>Inversion of control</h2>\n<p>Hight order functions and callbacks are a really powerful tool that allow us to get improve our abstraction and cover more cases scenarios in our implementations allowing other developers what to do with the data they are passing into the function. </p>\n<p>This kind of implementations inverts the control over the original function making to developer who is using your function responsible to the different cases scenarions and how to deal with them.</p>\n<p>Going back to our copyAndMultiplyByTwo function which accepts an array. Let's say we have created this function as a library to be used by other developers, and one of them requests that in the case that one of the items of the array is undefined, we should return 0.</p>\n<p>Let's implement the change:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">?</span> num <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then someone requires the same but for null values:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">copyAndMultiplyByTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">?</span> num <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n      output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> output\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>More requirements means more exceptions in the implementation, and more code changes in the code and for sure more complexity. </p>\n<p>However, in the case of our function copyAndModify, the inversion of controls make responsible to the developer of the exceptions that he needs to handle and how to implement it in a way that is safe for their app, and this is one of the more valuable features of high order function in combination with callbacks.</p>","frontmatter":{"title":"Hight order functions, callbacks,`` and inversion of control","date":"April, 03, 2021","path":"/high-order-functions-callbacks-inversion-control","tags":["javascript","functions","callbacks","high order functions","inversion of control"],"excerpt":"Functions are one of the basics parts of Javascript. They are really powerful but it depends on ourselves when we declare them how powerfull they can be.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":null,"next":{"html":"<p>It's been a few times that I have heard someone saying that I should use triple equals when comparing values because in that way I will be comparing not just the value but also the type of that value.</p>\n<p>An example of that case it would be something like comparing a number, maybe 2, with an string like \"2\". Depending how we compare this two values we can get different results.</p>\n<p>This is called equality between two values where two equals is loosy equality and the three equals is called strict equality</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false </span></code></pre></div>\n<p>We have assumed that the difference between both results it's basically that it's because the three equals is checking the type and the value and the two equals one is only checking the value. </p>\n<p>The thing it's both of them are checking the types, but the triple equal comparaison is returning false at the very first moment those types don't match.</p>\n<p>In the other hand the double equal will try a completely different approach, and that approach is called coercion.</p>\n<h2>Coercion in our code.</h2>\n<p>Coercion is basically type coversion, as it's called in EcmaScript spec. There are different abstract operations which are in charge of this type coversion when it's needed. ToPrimitive(), ToString(), ToNumber() or ToBoolean() will help us to achieve that type conversion.  </p>\n<p>but, when coercion takes place? We have always heard that coercion is something that we should avoid, because it can make us commit terrible mistakes but at the same time we should say that this is a very powerful feature in Javascript.</p>\n<h3>Number to String</h3>\n<p>We bare in mind that thought telling us that coercion is evil, but we use coercion all the time in one of the features more loved by everyone like the template interpolation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// coercion and evil</span>\n\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\n  <span class=\"token keyword\">const</span> introduction <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`My name is Jack and I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old`</span></span> <span class=\"token comment\">// coercion but great</span></code></pre></div>\n<p>Actually, what we are doing is a type conversion of the value for the variable age from a number to a string, and inserting that value within two strings that will create another string which, later, will be assigned to the introduction variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\n  <span class=\"token keyword\">const</span> part1 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`My name is Jack and I'm`</span></span>\n  <span class=\"token keyword\">const</span> part2 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`years old`</span></span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> part1 <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> part2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can say that this is the way implicit to do coercion and the one that sometimes we don't even know we are doing. There are other ways to do it more explicit like using the method String().</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\n  <span class=\"token keyword\">const</span> introduction <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`My name is Jack and I'm </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old`</span></span> </code></pre></div>\n<p>This was an example of coercion from number to string but how this could happen the other way around, a string into a number.</p>\n<h3>String to Number</h3>\n<p>All of us have dealt at some point with some elements in web development like forms that return string and we are expeting to deal with that as a number in our functionality but it's not, causing an unexpected behavior in our application.</p>\n<p>Let's think about a function called addTwo, which is gonna receive a parameter called num but, depending of the type of that paramenter is gonna return different values. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// number</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n\n  <span class=\"token comment\">// string</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Ops! 22</span></code></pre></div>\n<p>How we could be explicit about coercing a string into a number, well the same we did in our previous case but using the Number() function instead of the String()</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<p>Even we could pass that string into a number in an implicit way that it's not telling what it's doing as the Number() function but it's doing the type conversion behind the scenes, like adding the add operator in front of the paramenter.</p>\n<p>In that case, the + will do a coercion to our parameter passing it into a number when it's needed and when it's able to do it. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<h3>String to Boolean</h3>\n<p>And what about booleans. I'm pretty sure that at some point you have used a if statement to check if you are receiving a empty string without comparing with a empty string the variable itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n  <span class=\"token comment\">// Doing this </span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Instead of this</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myString <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Well, in that case what we are doing is coercing myString to a boolean since the if statement what it's expecting is an operation that evaluates on true or false like it's doing (string === \"\")</p>\n<p>There are other ways to make an implicit coercion with number or strings and one of them could be the double exclamation mark in front of our value</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token keyword\">const</span> myNumber <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// false</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>myNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// true    </span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>or as we saw also there is an explicit way to do it, with the function Boolean().</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"myString\"</span>\n  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// true</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Understanding coercion is important.</h2>\n<p>There are different corner cases for coercion when values interact with each other and some of them can be really unexpected but they are happening even when we don't know about it.</p>\n<p>The thing it's coercion could bring confusion to our codebase, and I'm not saying that you should use coercion within you app, but at least understand how it works would help a lot to understand what's going on when it happens implicity in your code.</p>","id":"68fd5554-a05f-59bc-9b2e-ac54cb815f3c","frontmatter":{"date":"03 April, 2021","path":"/values-and-coercion","title":"Values and coercion","excerpt":"How many times have you heard the fact that doubles equals check the value but not the type while three equals check both","tags":["javascript","coercion","variables javascript","javascript engine","javascript values"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}}}}