{"data":{"markdownRemark":{"html":"<p>Reactive forms means create forms programmatically. This practice allows us to develop a lot of features in our form which bring more control over them. These features could be validators, better access to FormControls, create new groups of FormControls or manage the form status or different changes which occur into it.</p>\n<h2>Reactive Form setup</h2>\n<p>The first thing we will need to it’s a property mainForm which will be a FormGroup that hold all control we will need to create a form programmatically. It’s important to keep in mind that this Angular feature doesn’t work with the common FormsModule from Angular. In this case, we must import the ReactiveFormsModule from @angular/forms.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As we said, the first step is to create the property which will control our FormGroup. Then, before rendering our template we need to initialize this form, ngOnInit is a good place to do this. Each field in our form will be a new FormControl that could receive a value (in this case) and follow by angular validators or custom validators. For this example, we have used a validator from Angular for required fields.</p>\n<p>Validators keyword (in Validators.required) is an that contains different methods and properties to validate form controls.</p>\n<ul>\n<li>Validators.required</li>\n<li>Validators.email</li>\n<li>Validators.maxLength</li>\n<li>Validators.minLength</li>\n<li>Validators.pattern</li>\n<li>etc…</li>\n</ul>\n<p>Sync HTML and Form code\nTo sync our form in the HTML template with the form created in the typeScript file we need to add to the form tag a FormGroup property binding with the name of our form.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">[FormGroup]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Normally, Angular creates an instance of ngForm when it detects a form tag in out HTML code. Adding FormGroup property binding we are avoiding this default behavior. As we see above we need to associate each input in the form with the FormControl in the typeScript file.</p>\n<p>Besides, normally we will make something with this form and we used to manage the value of the form through a function. To do this we will use the ngSubmit directive which allows us to access our form in our typescript file. NgSubmit is the most common way to manage the form submit in Template Driven approach as working with ReactiveForms. OnSubmit() references to the function in our typeScript files which will do whatever with this form.</p>\n<h2>Accessing to FormControls from the template.</h2>\n<p>Sometimes, you could need to access to different FormControls from the template. To do this, you only need to make reference to the form(mainForm) and use the method get with the name of the FormControl and its state (valid or invalid) for example. This is very common to show or hide error messages under the field.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">[FormGroup]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainForm.get('username').invalid &amp;&amp; mainForm.get('username').touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          Field required\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Above we are hiding or showing an error message according to the state of username input. In this case, the only validator makes this field required for this reason this message will be displayed when the field is empty.</p>\n<p>To avoid this message would be displayed from the rendering of the form we need to detect if this field has been touched (clicked) by the user</p>\n<h2>Grouping Controls</h2>\n<p>Maybe, the information that user must complete in our forms could be group by sections (personal, skills, studies, previous jobs…). For this reason, Angular provides us a solution to do this nesting a FormGroup into each other in the typeScript file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'userData'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Besides, we should involve this fields in the HTML template into a container with the tag FormGroupName which should be equal to the name of this formGroup in the typeScript side.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">[formGroup]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mainForm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- start Group of FormControls userData --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">formGroupName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userData<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n                      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n                        <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>email<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n                      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n                        <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Creating custom Validators</h2>\n<p>For custom validators, we only need to create a function as whichever. This function receives a formControl about which we will make all checks. If the validation fails we can return an object with all the information about what failed and if the validator is passed, we return null or nothing.</p>\n<p>Finally, we can add this validator to the formControl declaration. If we have more than one Validator, we can pass an array of validators as the second parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkForbiddenNames</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// very important detail explained below</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Custom Validator</span>\n  <span class=\"token function\">checkForbiddenNames</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">control<span class=\"token punctuation\">:</span> FormControl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>forbiddenUserNames<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'userNameForbidden'</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will need to bind the context because It’s Angular who executes this function and into this function, we have a reference to properties of the component as this.forbiddenUserNames.</p>\n<h2>Async Validators</h2>\n<p>This kind of validators work exactly as custom validators but they return an Observable or Promise to manage async data in its function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkForbiddenEmail</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n \n  <span class=\"token comment\">// Custom Async Validator</span>\n  <span class=\"token function\">checkForbiddenEmail</span><span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">:</span> FormControl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token operator\">|</span> Observable<span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token operator\">&lt;</span>any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// we are using [this] then we will have to bind the scope to this function</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>forbiddenEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'emailIsForbidden'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n \n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Async validators must be passed in the formControl as third parameter</p>\n<p>As we did in custom Validators, if this function makes reference to properties under the context of the Component like this.forbiddenEmail, we will bind the context to the validator in the FormControl declaration.</p>\n<h2>Status and Value changes</h2>\n<p>Our form has a valueChanges and statusChanges. These returns an Observable and we can subscribe to it. The valueChanges will notice to us that some value has changed if we are subscribed to it and we can make something when this value changes.</p>\n<p>On the other hand, if we are subscribed to statusChanges it will notice to us that the status of the form has changed or if it’s pending to change (this happen in async actions that requires a call to an API).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm<span class=\"token punctuation\">.</span>statusChanges<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Main status of the Form'</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm<span class=\"token punctuation\">.</span>valueChanges<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'All values in the Form'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Bonus: Creating an Array of FormControls</h2>\n<p>For creating an Array of formControls from our typeScript file we need to add a property (Hobbies in this case) to our formGroup which will be a new FormArray([])</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'userData'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkForbiddenNames</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkForbiddenEmail</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'hobbies'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Besides, we will need a function that allows us adding new FormControls to our formArray.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">addHobbyControl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> control <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormControl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> Validators<span class=\"token punctuation\">.</span>required<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// next we will push the control to the array</span>\n      <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>FormArray<span class=\"token operator\">></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainForm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hobbies'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also need to tell to typeScript that hobbies type is <FormArray></p>\n<p>By default this Array of FormControls is empty. Then we will need a trigger in the HTML template which fires this function and creates the input. It could be a button for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  \n  <span class=\"token comment\">&lt;!-- Add a formArray --></span>\n  <span class=\"token comment\">&lt;!-- We need the formArrayName to sync our formArray hobbies with the content this div --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">formArrayName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hobbies<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>Your Hobbies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token comment\">&lt;!-- Clicking this button we create a new FormControl REQUIRED input to add a new Hobby --></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>addHobby()<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add hobby<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-group<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let hobbyControl of mainForm.get('hobbies').controls; let i = index<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[formControlName]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>i<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>! hobbyControl.valid &amp;&amp; hobbyControl.touched<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>help-block<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Field required<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As we did with the formGroup, formGroupName and formControlName:</p>\n<p>Arrays also need to be encapsulated with the tag formArrayName with a property binding to the property hobbies in the typeScript file to sync our formArray with the content in this div</p>\n<p>Then we can see a *ngFor which iterates over all formControls in the hobbies FormArray. Each element into hobbies will be a hobbyControl from mainForm.get(‘hobbies).controls</p>","frontmatter":{"title":"Angular Forms: Reactive approach","date":"May, 21, 2018","path":"/blog/angular-forms-reactive-approach","tags":["javascript","angular","angular forms","reactive forms"],"excerpt":"Reactive forms means create forms programmatically. This practice allows us to develop a lot of features in our form which bring more control over them. These features could be validators, better access to FormControls, create new groups of FormControls or manage the form status or different changes which occur into it.","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/a11b6cc04759a32d3a9ec12a13a9c841/36e49/angular_forms_2.jpg"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/400f9d04b95a30fefc2839dcc8e519e4/48c6d/angular.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.</p>\n<ul>\n<li>Syntax Parser,</li>\n<li>Lexical Environment,</li>\n<li>Execution Context.</li>\n</ul>\n<h2>Syntax parser.</h2>\n<p>It’s a program that reads your code and determines what it does and if its grammar is valid. Your code is not magic, someone else wrote a program to translate it for the computer.</p>\n<p>These programs are interpreters, also known as compilers. Compilers work reading your code character by character and they implement that syntax in a way that computer can understand.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span> <span class=\"token punctuation\">}</span>\n  </code></pre></div>\n<p>This program starts reading F-U-N-C-T-I-O-N and when it finishes it determines that you have declared a function, and after this continues and identifies a variable inside of it.</p>\n<h2>Lexical environment</h2>\n<p>It’s about where something sits physically in the code you write. A lexical environment exists in programming in which where you write something is important. This happens because the order determines how these elements will interact with other variables and functions.</p>\n<p>Compilers care about where you put things. They make decisions about where something is and what is surrounding it.</p>\n<h2>Execution context: creation and hoisting</h2>\n<p>The execution context is a wrapper to help manage the code that is running. There are a lot of lexical environments. Which one is currently running via execution contexts. It can contain things beyond what you have written in your javascript code.</p>\n<p>The execution context is composed of two phases: creation and execution and we will need a variable and a function if we want to explain how both of them work:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n  \n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n  \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>When we execute this code It will show what we expected but if we would put the call to the function and the variable log at the top of the javascript file, it showed that the variable a wasn’t defined with a value instead of return an error as usual in other programming languages:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n  \n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n  \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>Some people think that this happens because the javascript engine moves all the functions and variables, created along the all entire code, to the top of the file. But how it really works is through the Creation phase where hoisting is created:</p>\n<ul>\n<li>Global Object</li>\n<li>‘this’</li>\n<li>Outer Environment</li>\n<li>and the Hoisting</li>\n</ul>\n<p>Javascript engine has already set hoisting, a memory space for variables and function that you’ve created in that entire code that you’ve built. All this mean that when the code is executed line by line, this variables and function already exist.</p>\n<p>However, functions are entirely placed into memory space, that means that the function is named and the code inside but variables are only created, their value is not assigned yet. It’s in the next phase, the execution phase, where these kinds of assignments are set, where variable equals something.</p>\n<p>Then, the variable is executed but how it has not a value assigned instead of return and error, javascript engine puts a placeholder called undefined.</p>\n<h2>Different between undefined and not been defined</h2>\n<p>In javascript, we have two different ways to define a variable. It could be when we assign a value or when the own engine of the programming language assigns the value automatically as undefined. In another hand, if we never create a variable, the browser will show us an Uncaught referenceError: variable is not defined.</p>\n<p>In the first case, we can create a variable like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>and we will see that the browser shows that the browser returns the value Hello World. But if we try to create another variable b without a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// undefined</span>\n\n  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>In this case, the variable has been created and the console log shows the variable as undefined but this is confusing. Because this variable has a value assigned automatically by the javascript engine with the special keyword undefined. For this reason, we don’t get an error when we refer to the variable b.</p>\n<p>However, if we would have tried to log a variable that we have never declared before like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Uncaught ReferenceError : c is not define</span></code></pre></div>\n<p>It will give you an error because when that initial execution context creation, in that creation phase, when Javascript engine went trough memory space, it didn’t find a var c so it doesn’t have c in memory at all.</p>","id":"b08cc072-4e82-52a5-899a-07354eb1f6ca","frontmatter":{"date":"May, 18, 2018","path":"/blog/how-javascript-engine-works","title":"How javascript engine works","excerpt":"If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.","tags":["javascript","basic javascript","javascript engine","hoisting"],"type":"post","category":"javascript","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/0128ab93ee2f7733220ce82d07a540aa/7a298/js_engine.jpg"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}},"next":{"html":"<p>Template Driven is the most common way to manage forms in Angular when you start to dive into this framework. Although It offers fewer features than the Reactive approximation, sometimes It could be very useful. Mainly for forms which don’t manage huge information.</p>\n<p>In the Template Driven approach, your form is set in the template an Angular infers the form object from the DOM.</p>\n<p>Angular always detects the form tag in the HTML and automatically creates an Object to represent this element.</p>\n<p>But Angular doesn’t detect fields into the form and this behavior is for some reasons:</p>\n<ul>\n<li>maybe all inputs, selects or radios, etc must not be sent.</li>\n<li>Maybe we could have elements that only interacts with the UI.</li>\n<li>others.</li>\n</ul>\n<p>Then, the information that our form will save on its value must be added by us with the ngModel directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Submitting Form</h2>\n<p>We submit forms through ngSubmit event binding and normally a function fired through this event makes all work with our form.</p>\n<p>But we need first create a reference of this form which will be passed as a parameter into this function.</p>\n<p>We create this reference through the ngForm directive associated with a template reference variable (#myForm). Later, the reference it’s the element we pass into the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit(myForm)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">#myForm</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>You didn’t add an NgForm directive.</p>\n<p>Angular did. Angular automatically creates and attachesan NgForm directive to the form tag.</p>\n<p>The NgForm directive supplements the form element with additional features. It holds the controls you created for the elements with an ngModel directive and name attribute and monitors their properties, including their validity. It also has its own valid property which is true only if every contained control is valid.</p>\n<p>The ngForm directive will create a javascript object automatically with all form data, which will be passed to the function in the template and received in the function declaration in the TypeScript file.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">form<span class=\"token punctuation\">:</span> NgForm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//log in the console the form data</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, thanks to ngForm we will access easily to all properties created from our form. Some of this properties allow us to interact with UI and know specific details and information about the form.</p>\n<ul>\n<li>Dirty: some values have changed</li>\n<li>Touched: some field was clicked</li>\n<li>Invalid: some validation rule wasn’t passed</li>\n<li>Status: general status of the form. For example, valid.</li>\n<li>Errors: errors returned by validation rules</li>\n</ul>\n<p>One pragmatic way to use these properties is to disable the submit button when the form is not valid.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">&lt;</span>button <span class=\"token punctuation\">[</span>disabled<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"!myForm.valid\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span> Submit <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2>Access to Form through ViewChild</h2>\n<p>We declared a template reference variable in our form tag which was assigned to ngForm. We can access this reference through the ViewChild decorator as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myForm'</span><span class=\"token punctuation\">)</span> myForm<span class=\"token punctuation\">:</span> NgForm</code></pre></div>\n<h2>Validation in the template</h2>\n<p>We can add to our form fields different validation rules with directives:</p>\n<ul>\n<li>required</li>\n<li>email</li>\n<li>maxlength</li>\n<li>pattern</li>\n</ul>\n<p>Thanks to these directives, Angular will add or remove some classes to the form that indicates how is the status at this moment: ng-invalid, ng-touched. Managing this classes we can return a visual feedback to the user to indicate when a value is not correct.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">email</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">  <span class=\"token selector\">input.ng-invalid.ng-touched</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Adding Error messages</h2>\n<p>Sometimes, a border red is not enough to indicate to the user what is wrong with this field. Then we should show the error with a message in a help box.</p>\n<p>To do this, we need a reference to this field that allows us to access to this field from any place on this template. We need to add to the input tag a template reference variable assigned to the ngModel directive.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">email</span> <span class=\"token attr-name\">#email</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngModel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Why “ngModel”? A directive’s exportAs property tells Angular how to link the reference variable to the directive. You set email to ngModel because the ngModel directive’s exportAs property happens to be ngModel.</p>\n<p>Now, we can show o hide a message that indicates if this field is valid or invalid related to the email property that references an ngModel directive for this field.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>help-block<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!email.valid and email.touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Email should be valid\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Setting default values with bindings</h2>\n<h3>One way data binding</h3>\n<p>We could set a default value for inputs through property binding. We can create a property in our ts file:</p>\n<p>public response: string = 'pet'\nAnd later we can make reference to this property from the template with a ngModel property binding with []</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[ngModel]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>Two-way data binding</h3>\n<p>Besides, we could want to make some validation the value introduced in the input. Or show this value in other places automatically. Two-way data binding with ngModel is how we should do this.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>response<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span>\n  \n  // we can show the value in other place\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{ response }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Grouping Form Controls</h2>\n<p>Maybe we could want to structure our object of values in the ngForm because we are looking for organizing all values in bigger forms.</p>\n<p>To do this we have to wrap our inputs which belong to the same group and add the directive</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user-data<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModelGroup</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userData<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">#userData</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngModelGroup<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">></span></span>\n        \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ngModel</span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">email</span> <span class=\"token attr-name\">#email</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngModel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>help-block<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!email.valid &amp;&amp; email.touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please enter a valid Email<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>As we can see above we can create a template reference variable for this ngModelGroup (#userData=”ngModelGroup”) to access to the object representation of this group and add error messages under the group.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>!userData.valid &amp;&amp; userData.touched<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>UserData is not valid!!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Patching and setting values to forms</h2>\n<p>We have two different methods to insert values in a form setting all values for a form or patch only specific fields.</p>\n<p>Through the ViewChild decorator, we can create a representation of the form which has a template reference variable. After this, we can do different actions over this form from the typeScript file</p>\n<p>Set values in a complete form\nIn the case of set al values to the complete form, We can pass an object with the same structure that  form values property has:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  @<span class=\"token function\">ViewChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myForm'</span><span class=\"token punctuation\">)</span> myForm<span class=\"token punctuation\">:</span> NgForm \n \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myForm<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          username<span class=\"token punctuation\">:</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span>\n          email <span class=\"token punctuation\">:</span><span class=\"token string\">'johndoe@gmail.com'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token punctuation\">:</span><span class=\"token string\">'My pet\\'s name was Rudolf'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Patch value in a specific form field</h2>\n<p>By another hand, we can only patch a value for an input or select. To do this, we use the patchValue function from form wrap.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myForm<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span><span class=\"token function\">patchValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      userData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token string\">'Jonh'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, this actions should be encapsulated in methods and we can execute them wherever we want: ngOnInit or after a user action with an event binding that fires this function, a button clicked for example.</p>","id":"5d9e8eba-5400-5d98-8325-c97e0c3e7cdd","frontmatter":{"date":"May, 23, 2018","path":"/blog/angular-forms-template-driven-approach","title":"Angular Forms: Template Driven approach","excerpt":"Template Driven is the most common way to manage forms in Angular when you start to dive into this framework. Although It offers fewer features than the Reactive approximation, sometimes It could be very useful. Mainly for forms which don’t manage huge information.","tags":["javascript","angular","angular forms","template driven approach"],"type":"post","category":"angular","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/f13e622ca613a6677ffb06adcebf4bd1/7a298/angular_forms_1.jpg"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/400f9d04b95a30fefc2839dcc8e519e4/48c6d/angular.png"}}}}}}}