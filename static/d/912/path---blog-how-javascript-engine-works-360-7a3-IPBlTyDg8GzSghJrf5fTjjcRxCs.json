{"data":{"markdownRemark":{"html":"<p>If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.</p>\n<ul>\n<li>Syntax Parser,</li>\n<li>Lexical Environment,</li>\n<li>Execution Context.</li>\n</ul>\n<h2>Syntax parser.</h2>\n<p>It’s a program that reads your code and determines what it does and if its grammar is valid. Your code is not magic, someone else wrote a program to translate it for the computer.</p>\n<p>These programs are interpreters, also known as compilers. Compilers work reading your code character by character and they implement that syntax in a way that computer can understand.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span> <span class=\"token punctuation\">}</span>\n  </code></pre></div>\n<p>This program starts reading F-U-N-C-T-I-O-N and when it finishes it determines that you have declared a function, and after this continues and identifies a variable inside of it.</p>\n<h2>Lexical environment</h2>\n<p>It’s about where something sits physically in the code you write. A lexical environment exists in programming in which where you write something is important. This happens because the order determines how these elements will interact with other variables and functions.</p>\n<p>Compilers care about where you put things. They make decisions about where something is and what is surrounding it.</p>\n<h2>Execution context: creation and hoisting</h2>\n<p>The execution context is a wrapper to help manage the code that is running. There are a lot of lexical environments. Which one is currently running via execution contexts. It can contain things beyond what you have written in your javascript code.</p>\n<p>The execution context is composed of two phases: creation and execution and we will need a variable and a function if we want to explain how both of them work:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n  \n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n  \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>When we execute this code It will show what we expected but if we would put the call to the function and the variable log at the top of the javascript file, it showed that the variable a wasn’t defined with a value instead of return an error as usual in other programming languages:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n  \n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n  \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>Some people think that this happens because the javascript engine moves all the functions and variables, created along the all entire code, to the top of the file. But how it really works is through the Creation phase where hoisting is created:</p>\n<ul>\n<li>Global Object</li>\n<li>‘this’</li>\n<li>Outer Environment</li>\n<li>and the Hoisting</li>\n</ul>\n<p>Javascript engine has already set hoisting, a memory space for variables and function that you’ve created in that entire code that you’ve built. All this mean that when the code is executed line by line, this variables and function already exist.</p>\n<p>However, functions are entirely placed into memory space, that means that the function is named and the code inside but variables are only created, their value is not assigned yet. It’s in the next phase, the execution phase, where these kinds of assignments are set, where variable equals something.</p>\n<p>Then, the variable is executed but how it has not a value assigned instead of return and error, javascript engine puts a placeholder called undefined.</p>\n<h2>Different between undefined and not been defined</h2>\n<p>In javascript, we have two different ways to define a variable. It could be when we assign a value or when the own engine of the programming language assigns the value automatically as undefined. In another hand, if we never create a variable, the browser will show us an Uncaught referenceError: variable is not defined.</p>\n<p>In the first case, we can create a variable like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>and we will see that the browser shows that the browser returns the value Hello World. But if we try to create another variable b without a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// undefined</span>\n\n  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>In this case, the variable has been created and the console log shows the variable as undefined but this is confusing. Because this variable has a value assigned automatically by the javascript engine with the special keyword undefined. For this reason, we don’t get an error when we refer to the variable b.</p>\n<p>However, if we would have tried to log a variable that we have never declared before like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Uncaught ReferenceError : c is not define</span></code></pre></div>\n<p>It will give you an error because when that initial execution context creation, in that creation phase, when Javascript engine went trough memory space, it didn’t find a var c so it doesn’t have c in memory at all.</p>","frontmatter":{"title":"How javascript engine works","date":"May, 23, 2018","path":"/blog/how-javascript-engine-works","tags":["javascript","basic javascript","javascript engine","hoisting"],"excerpt":"If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam metus orci, malesuada rutrum ligula in, feugiat ultricies mi. Pellentesque vel libero ut metus auctor vehicula quis sit amet neque. In hac habitasse platea dictumst. Aenean rutrum nunc elit, sit amet feugiat nisi pharetra id. Cras auctor nibh felis, eu accumsan turpis aliquet in. Vivamus interdum id erat a bibendum. In orci dui, congue eget fermentum sed, pellentesque eu mauris. Cras porta eros ligula, in ultrices augue ullamcorper vitae. Vestibulum efficitur, diam ac pulvinar blandit, tortor leo scelerisque nibh, in ornare mauris mi et ligula. Maecenas iaculis arcu ligula, ac mollis nisl lobortis eu. In hac habitasse platea dictumst. Morbi suscipit mi ac laoreet blandit. Aliquam auctor eros vel tincidunt scelerisque. Sed nulla mauris, aliquet nec arcu a, aliquet convallis ligula. Integer auctor nibh nec risus mattis fringilla.</p>\n<p>Ut quis feugiat ipsum, vel placerat urna. Donec lobortis at neque et sagittis. Phasellus hendrerit eros ac dapibus molestie. Duis ac maximus ante. Donec id est dictum, facilisis quam et, vestibulum diam. Curabitur accumsan ultricies quam et lobortis. Fusce ac accumsan ligula. Etiam rhoncus dolor nec orci consequat finibus. Vivamus sed mauris dapibus, laoreet neque eget, rhoncus velit. Nunc venenatis sapien aliquam nunc blandit, vel blandit mauris venenatis. Cras quis erat volutpat, venenatis mi vel, mollis mauris. Maecenas varius vitae diam vel facilisis. Integer tempor lacinia velit id lobortis. Maecenas vel varius diam. Donec et dui tempus, laoreet lorem in, molestie erat. Nulla mattis a neque eu pellentesque.</p>\n<p>Nullam justo mauris, convallis quis odio quis, elementum egestas velit. Pellentesque quis ultricies ante. Nulla finibus interdum tortor at semper. Nunc rutrum blandit mi sed bibendum. Morbi volutpat interdum purus ut fermentum. Pellentesque lobortis scelerisque lacus ac varius. Phasellus nec pharetra elit. Etiam ut sapien id odio accumsan pharetra id sed nisi. Cras porta sit amet massa id sollicitudin.</p>\n<p>Pellentesque pharetra orci in mollis interdum. Nullam auctor elit nec nisl mattis, quis luctus mi malesuada. Nulla ut nulla a leo ultricies blandit at ut tellus. Quisque eu velit vitae justo gravida consequat. Aliquam mollis eleifend urna, vel gravida ante tincidunt sed. Integer in vehicula lacus. Maecenas at ante dolor. Curabitur at pellentesque libero. Nam tempor nec sem non luctus. Donec ut elit eleifend, imperdiet lectus id, sagittis ex. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc mauris sem, rhoncus in tristique eget, condimentum cursus quam. Vestibulum tempor placerat elit a vestibulum. Suspendisse potenti.</p>\n<p>Phasellus vel mattis tellus, a rhoncus nisi. Maecenas facilisis rhoncus laoreet. Vestibulum convallis erat auctor nulla auctor blandit. Nunc vitae lectus sit amet leo commodo congue a id turpis. Cras vehicula vitae mi nec tincidunt. Praesent ac nisl ultrices nibh pulvinar ornare non vitae ipsum. Mauris sagittis nisi sed aliquet efficitur. Sed lectus ante, vulputate ac posuere in, dignissim id ex. Phasellus rhoncus tempus est sed accumsan. Quisque a massa non nunc lacinia auctor. Aenean at dolor lorem. Aliquam arcu massa, commodo id laoreet eu, laoreet et mauris. Duis venenatis mauris magna, et vulputate quam porttitor a.</p>","id":"87dc09ed-c905-5114-9f86-235224c8cac4","frontmatter":{"date":"May, 23, 2018","path":"/blog/third-post","title":"Angular is the sencond most used javascript framework","excerpt":"It all begins here. Do not skip to the last page. Do not let a friend or message board ruin this comic for you. The future (and past) of the DC Universe starts here. Don’t say I didn’t warn you!","tags":["Angular","angularjs","javascript"],"type":"post","category":"angular","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/cbb02084b487043c74bc65db05c76032/def7a/dc-comic.jpg"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/400f9d04b95a30fefc2839dcc8e519e4/48c6d/angular.png"}}}}},"next":null}}