{"data":{"markdownRemark":{"html":"<p>If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.</p>\n<ul>\n<li>Syntax Parser,</li>\n<li>Lexical Environment,</li>\n<li>Execution Context.</li>\n</ul>\n<h2>Syntax parser.</h2>\n<p>It’s a program that reads your code and determines what it does and if its grammar is valid. Your code is not magic, someone else wrote a program to translate it for the computer.</p>\n<p>These programs are interpreters, also known as compilers. Compilers work reading your code character by character and they implement that syntax in a way that computer can understand.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span> <span class=\"token punctuation\">}</span>\n  </code></pre></div>\n<p>This program starts reading F-U-N-C-T-I-O-N and when it finishes it determines that you have declared a function, and after this continues and identifies a variable inside of it.</p>\n<h2>Lexical environment</h2>\n<p>It’s about where something sits physically in the code you write. A lexical environment exists in programming in which where you write something is important. This happens because the order determines how these elements will interact with other variables and functions.</p>\n<p>Compilers care about where you put things. They make decisions about where something is and what is surrounding it.</p>\n<h2>Execution context: creation and hoisting</h2>\n<p>The execution context is a wrapper to help manage the code that is running. There are a lot of lexical environments. Which one is currently running via execution contexts. It can contain things beyond what you have written in your javascript code.</p>\n<p>The execution context is composed of two phases: creation and execution and we will need a variable and a function if we want to explain how both of them work:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n  \n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n  \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>When we execute this code It will show what we expected but if we would put the call to the function and the variable log at the top of the javascript file, it showed that the variable a wasn’t defined with a value instead of return an error as usual in other programming languages:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n  \n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Called ¡b!\"</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">}</span> \n  \n  <span class=\"token comment\">// Called b! </span>\n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>Some people think that this happens because the javascript engine moves all the functions and variables, created along the all entire code, to the top of the file. But how it really works is through the Creation phase where hoisting is created:</p>\n<ul>\n<li>Global Object</li>\n<li>‘this’</li>\n<li>Outer Environment</li>\n<li>and the Hoisting</li>\n</ul>\n<p>Javascript engine has already set hoisting, a memory space for variables and function that you’ve created in that entire code that you’ve built. All this mean that when the code is executed line by line, this variables and function already exist.</p>\n<p>However, functions are entirely placed into memory space, that means that the function is named and the code inside but variables are only created, their value is not assigned yet. It’s in the next phase, the execution phase, where these kinds of assignments are set, where variable equals something.</p>\n<p>Then, the variable is executed but how it has not a value assigned instead of return and error, javascript engine puts a placeholder called undefined.</p>\n<h2>Different between undefined and not been defined</h2>\n<p>In javascript, we have two different ways to define a variable. It could be when we assign a value or when the own engine of the programming language assigns the value automatically as undefined. In another hand, if we never create a variable, the browser will show us an Uncaught referenceError: variable is not defined.</p>\n<p>In the first case, we can create a variable like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// Hello World</span></code></pre></div>\n<p>and we will see that the browser shows that the browser returns the value Hello World. But if we try to create another variable b without a value:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// undefined</span>\n\n  <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>In this case, the variable has been created and the console log shows the variable as undefined but this is confusing. Because this variable has a value assigned automatically by the javascript engine with the special keyword undefined. For this reason, we don’t get an error when we refer to the variable b.</p>\n<p>However, if we would have tried to log a variable that we have never declared before like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Uncaught ReferenceError : c is not define</span></code></pre></div>\n<p>It will give you an error because when that initial execution context creation, in that creation phase, when Javascript engine went trough memory space, it didn’t find a var c so it doesn’t have c in memory at all.</p>","frontmatter":{"title":"How javascript engine works","date":"May, 18, 2018","path":"/how-javascript-engine-works","tags":["javascript","basic javascript","javascript engine","hoisting"],"excerpt":"If we want to understand how javascript works beyond your code, you need to know three different concepts or ideas that you will see repeated throughout the rest of your life as a programmer.","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/d8ed83a82cb821674d3066fcb48a91d8/024a5/js_engine.png"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>There are many ways to reach a solution to solve a given problem in almost all life challenges and web development or coding won't be an exception. In fact, we can ask to different developers to write a function for doing a simple task and it's likely that we get different approaches.</p>\n<p>All this approaches can work, but maybe one of them is the best one. Probably if we ask which is the best solution for that given problem we can get also different answers. Some developers will measure the code quality by its length or characters number, time to complete, or readability.</p>\n<p>We will focus on how fast a functions is and for getting that information we can use counting operations. Less operations means that our code is more efficient. </p>\n<p>Here we have to examples for the same task that it's only add all numbers from 0 to n number. Being <em>n = 10</em> we will have something like this:\n<em>0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10</em>\nBoth example makes the same task in different ways.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addUpToN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addUpToX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first example makes an operation every time it pass by the loop what means at least 10 operations without counting assignation and the loop counter increasing and many more. Let's say at least 20 operations against the only three operations in the second one. </p>\n<p>The first example will increase if the n number increases as well, being exponential the number of operations while in the second example it will remain the same number of operations.</p>\n<h2>Big O notation</h2>\n<p>Big notation is all about this behaviour, it allows us to talk formally about how the runtime of an algorithm grows as the inputs grow, this is the <em>Time complexity</em> of and algorithm.</p>\n<p>We say that an algorithm is O(f(n)) if the number of simple operations the computer has to do is eventually less than a constant times f(n), as n increses.</p>\n<ul>\n<li>f(n) could be linear.</li>\n<li>f(n) could be quadratic.</li>\n<li>f(n) could be constant.</li>\n<li>f(n) could be something different.</li>\n</ul>\n<p>We will not care about the constans, only the big picture of the function. For example in a function that makes 5 operations everytime a given number <em>n</em> increases we only take in count that this is an O(n) instead what it's actually, O(5n).</p>\n<p>In this way we can say that:</p>\n<ul>\n<li>O(2n)   => O(n) for linears functions.</li>\n<li>O(500)  => O(1) for constans.</li>\n<li>O(13n2) => O(n2) for quadratics.</li>\n</ul>\n<p>As before we can say that smaller terms don't care neither:</p>\n<ul>\n<li>O(n + 50)  => O(n)</li>\n</ul>\n<p>And it goes beyond, and we can say that according to a big picture and big quantities only cares the biggest one:</p>\n<ul>\n<li>O(n2 + 5n + 500) => O(n2) </li>\n</ul>\n<h2>Big O Shorthand</h2>\n<p>Here we have a little resume of how according to the operations in a functions, we can define it.</p>\n<ol>\n<li>Arithmetic operations are constant.</li>\n<li>Variable assignment is constant.</li>\n<li>Accessing elements in an array(by index) or object(by key) is constant.</li>\n<li>In a loop, the complexity is the length of the loop times the complexity of whatever happens inside of the loop.</li>\n</ol>\n<p>When we take a look into a function which reveives a number we only have to care about the behaviour of a function when this number grows. As an example we can say:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">printUntilFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printNForever</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        n<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>printUntilFive(n)</em> is an 0(1) function because if n tends to infinity the result will be constant anyway. In the other hand, <em>printNForever(n)</em> is an O(n) function and an infinite loop. </p>\n<h2>Space Complexity</h2>\n<p>Until now we have spoken about Time Complexity, it means how we can analyze the runtime of an algorithm as the size of the inputs increases. But we must care also about <em>Space Complexity</em> that it's how much additional memory do we need to allocate in order to run the in our algorithm.</p>\n<p>When we say additional memory we are talking about auxiliary space complexity and that means whatever it's happening into the algorithm, not the fact that as an input n grows approching infinity the size on the input itself which is n is going to grow.</p>\n<h2>Basic rules of Space Complexity</h2>\n<ul>\n<li>Most privimitives (booleans, numbers, undefined, null) are constant space.</li>\n<li>String requires O(n) space (where n is the string length).</li>\n<li>Arrays and Objects are O(n).</li>\n</ul>\n<p>Lets analyze a function to explain the memory consume by an algorithm:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> arra<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> This function above is constant speaking roughtly about space complexity we have a number when we declare <em>total as 0</em> and other constant when we declare <em>i = 0</em> and it doesn't care all the additions because the space is already taken in the first assigment and it's the same as its value grows. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        newArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> arra<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Otherwise this function is linear O(n) because the new array created into the algorithm will grow proportionally to the size of the given array as an input. The other assignment are not significant as it was happening with the time complexity.</p>","id":"07c170b0-a61d-55f4-bf06-9b2f77680938","frontmatter":{"date":"July, 12, 2019","path":"/intro-to-big-notation","title":"Intro to big notation","excerpt":"There are many ways to reach a solution to solve a given problem in almost all life challenges and web development or coding won't be an exception.","tags":["javascript","big o notation","algorithms","functional programming"],"type":"post","category":"javascript","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/239311a03f9797f4361f2c5c14024c9b/24599/big-o-notation-introduction.png"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}},"next":{"html":"<p>One of the most anoyying things when you are working in javascript is breaking apart into two lines an arrow function because you need to log in the console the values that you are receiving in a callback.</p>\n<p>There are a few ways to solve this problem and make your prints in the console more efficient for debugging and save some time:</p>\n<p>The first thing you can do is use the || operator. You can call your console log just at the begining of the arrow function and then add just behind and <em>||</em> operator in between of the log and the function or whatever you were doing in that callback </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Other way to do it is through a comma, you can return the values as you did before, only you need to wrap the console.log function and the value returned into parenthesis and separate both values by a comma, as you can see below. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This solution avoids to wrap all your clean code into brackets for creating the console log and the return keyword, and the later, after debug the problem that you got on that request restore the old code.</p>\n<p>It's seem like a really dumb trick but You'll be glad to use it when thing get more complex and check values turns into a usual task.</p>","id":"c5809367-9a23-5a1b-8604-32082a2eaa6a","frontmatter":{"date":"September, 27, 2019","path":"/console-logs-without-breaking-apart-functions","title":"Don't break apart one line arrow functions when printing in the console","excerpt":"One of the most anoyying things when you are working in javascript is breaking apart into two lines an arrow function because you need to log in the console the values that you are receiving in your callback","tags":["javascript","react","pure functions","functional programming"],"type":"post","category":"reactjs","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/0118eb51acd7ad8814b22e7566d35e28/24599/prints.png"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/73ecf96398499dd6127dadc1e9e631ad/48c6d/reactjs.png"}}}}}}}