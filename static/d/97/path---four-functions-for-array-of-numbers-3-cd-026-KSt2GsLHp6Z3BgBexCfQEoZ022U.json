{"data":{"markdownRemark":{"html":"<p>It's very common to front array of numbers when working with data in javascript, and many time we need to do different operations with them. Here are four functions that will help you with this task.</p>\n<p>Getting the max number, , the minimun number, the average and the sum of all the elements is one of the most commons things in javascript.</p>\n<h2>Getting the max number</h2>\n<p>The first function is returning the max number into an array of numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getHigher</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">getHigher</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 20</span></code></pre></div>\n<h2>Getting the min number</h2>\n<p>In the same way we did before, we created an arrow function which returns the Math function min invoked while we are passing to it the spread array. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLower</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">getLower</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2</span></code></pre></div>\n<h2>Getting the min average</h2>\n<p>In the same way we did before, we created an arrow function which returns the Math function min invoked while we are passing to it the spread array. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLower</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">getLower</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2</span></code></pre></div>","frontmatter":{"title":"Four functions for working with array of numbers","date":"September, 02, 2019","path":"/four-functions-for-array-of-numbers","tags":["javascript","array","numbers","functional programming"],"excerpt":"It's very common to front array of numbers when working with data in javascript, and many time we need to do different operations with them. Here are four functions that will help you with this task","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/d5fc8143db6dc6662782d89c6df87e58/024a5/rocket.png"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>One of the most anoyying things when you are working in javascript is breaking apart into two lines an arrow function because you need to log in the console the values that you are receiving in a callback.</p>\n<p>There are a few ways to solve this problem and make your prints in the console more efficient for debugging and save some time:</p>\n<p>The first thing you can do is use the || operator. You can call your console log just at the begining of the arrow function and then add just behind and <em>||</em> operator in between of the log and the function or whatever you were doing in that callback </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Other way to do it is through a comma, you can return the values as you did before, only you need to wrap the console.log function and the value returned into parenthesis and separate both values by a comma, as you can see below. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token punctuation\">(</span><span class=\"token parameter\">users</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> users <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This solution avoids to wrap all your clean code into brackets for creating the console log and the return keyword, and the later, after debug the problem that you got on that request restore the old code.</p>\n<p>It's seem like a really dumb trick but You'll be glad to use it when thing get more complex and check values turns into a usual task.</p>","id":"c5809367-9a23-5a1b-8604-32082a2eaa6a","frontmatter":{"date":"September, 27, 2019","path":"/console-logs-without-breaking-apart-functions","title":"Don't break apart one line arrow functions when printing in the console","excerpt":"One of the most anoyying things when you are working in javascript is breaking apart into two lines an arrow function because you need to log in the console the values that you are receiving in your callback","tags":["javascript","react","pure functions","functional programming"],"type":"post","category":"reactjs","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/0118eb51acd7ad8814b22e7566d35e28/24599/prints.png"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/73ecf96398499dd6127dadc1e9e631ad/48c6d/reactjs.png"}}}}},"next":null}}