{"data":{"markdownRemark":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"prev":{"html":"<p>It's very common to face an array of numbers when working with data in javascript, and sometimes we need to do different operations with them. Here are four functions that will help you with this task.</p>\n<p>Getting the max number, , the minimun number, the average and the sum of all the elements is one of the most commons things in javascript.</p>\n<h2>Getting the max number</h2>\n<p>The first function is returning the max number into an array of numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getHigher</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">getHigher</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 20</span></code></pre></div>\n<h2>Getting the min number</h2>\n<p>In the same way we did before, we created an arrow function which returns the Math function min invoked while we are passing to it the spread array. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLower</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">getLower</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2</span></code></pre></div>\n<h2>Getting the total addition</h2>\n<p>For getting this value we could create an accumulator out of the function and use a forEach for passing by every value and add it to the accumulator, but this method modifies a value out of the scope, and it doesn't match with the concept of pure functions. Instead of using this, we are going to use the reduce method which has the accumulator by itself and it's returned as final value.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTotal</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> number<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 50</span></code></pre></div>\n<h2>Getting the average</h2>\n<p>For getting the average we can use the same function than in the example before but we have to split the total value by the total number of elements in the array.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAverage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> number<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>arr<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 10</span></code></pre></div>\n<p>This are really clean and helpful methods that for sure you'll use some day with plain number or also with objects based in some property of them.</p>","id":"9bc5b8c0-1dbc-538c-a97e-1f69ab0f8304","frontmatter":{"date":"October, 08, 2019","path":"/four-functions-for-arrays","title":"Four functions for working with arrays","excerpt":"It's very common to front array of numbers when working with data in javascript, and many time we need to do different operations with them. Here are four functions that will help you with this task","tags":["javascript","array","pure functions","functional programming"],"type":"post","category":"javascript","thumbnail":{"childImageSharp":{"fluid":{"src":"/static/d5fc8143db6dc6662782d89c6df87e58/24599/rocket.png"}}},"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}},"next":{"html":"<p>There are many ways to reach a solution to solve a given problem in almost all life challenges and web development or coding won't be an exception. In fact, we can ask to different developers to write a function for doing a simple task and it's likely that we get different approaches.</p>\n<p>All this approaches can work, but maybe one of them is the best one. Probably if we ask which is the best solution for that given problem we can get also different answers. Some developers will measure the code quality by its length or characters number, time to complete, or readability.</p>\n<p>We will focus on how fast a functions is and for getting that information we can use counting operations. Less operations means that our code is more efficient. </p>\n<p>Here we have to examples for the same task that it's only add all numbers from 0 to n number. Being <em>n = 10</em> we will have something like this: <em>0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10</em>\nBoth example makes the same task in different ways.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addUpToN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addUpToX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first example makes an operation every time it pass by the loop what means at least 10 operations without counting assignation and the loop counter increasing and many more. Let's say at least 20 operations against the only three operations in the second one. </p>\n<p>The first example will increase if the n number increases as well, being exponential the number of operations while in the second example it will remain the same number of operations.</p>\n<h2>Big O notation</h2>\n<p>Big notation is all about this behaviour, it allows us to talk formally about how the runtime of an algorithm grows as the inputs grow, this is the <em>Time complexity</em> of and algorithm.</p>\n<p>We say that an algorithm is O(f(n)) if the number of simple operations the computer has to do is eventually less than a constant times f(n), as n increses.</p>\n<ul>\n<li>f(n) could be linear.</li>\n<li>f(n) could be quadratic.</li>\n<li>f(n) could be constant.</li>\n<li>f(n) could be something different.</li>\n</ul>\n<p>We will not care about the constans, only the big picture of the function. For example in a function that makes 5 operations everytime a given number <em>n</em> increases we only take in count that this is an O(n) instead what it's actually, O(5n).</p>\n<p>In this way we can say that:</p>\n<ul>\n<li>O(2n)   => O(n) for linears functions.</li>\n<li>O(500)  => O(1) for constans.</li>\n<li>O(13n2) => O(n2) for quadratics.</li>\n</ul>\n<p>As before we can say that smaller terms don't care neither:</p>\n<ul>\n<li>O(n + 50)  => O(n)</li>\n</ul>\n<p>And it goes beyond, and we can say that according to a big picture and big quantities only cares the biggest one:</p>\n<ul>\n<li>O(n2 + 5n + 500) => O(n2) </li>\n</ul>\n<h2>Big O Shorthand</h2>\n<p>Here we have a little resume of how according to the operations in a functions, we can define it.</p>\n<ol>\n<li>Arithmetic operations are constant.</li>\n<li>Variable assignment is constant.</li>\n<li>Accessing elements in an array(by index) or object(by key) is constant.</li>\n<li>In a loop, the complexity is the length of the loop times the complexity of whatever happens inside of the loop.</li>\n</ol>\n<p>When we take a look into a function which reveives a number we only have to care about the behaviour of a function when this number grows. As an example we can say:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">printUntilFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printNForever</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        n<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>printUntilFive(n)</em> is an 0(1) function because if n tends to infinity the result will be constant anyway. In the other hand, <em>printNForever(n)</em> is an O(n) function and an infinite loop. </p>\n<h2>Space Complexity</h2>\n<p>Until now we have spoken about Time Complexity, it means how we can analyze the runtime of an algorithm as the size of the inputs increases. But we must care also about <em>Space Complexity</em> that it's how much additional memory do we need to allocate in order to run the in our algorithm.</p>\n<p>When we say additional memory we are talking about auxiliary space complexity and that means whatever it's happening into the algorithm, not the fact that as an input n grows approching infinity the size on the input itself which is n is going to grow.</p>\n<h2>Basic rules of Space Complexity</h2>\n<ul>\n<li>Most privimitives (booleans, numbers, undefined, null) are constant space.</li>\n<li>String requires O(n) space (where n is the string length).</li>\n<li>Arrays and Objects are O(n).</li>\n</ul>\n<p>Lets analyze a function to explain the memory consume by an algorithm:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> arra<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> This function above is constant speaking roughtly about space complexity we have a number when we declare <em>total as 0</em> and other constant when we declare <em>i = 0</em> and it doesn't care all the additions because the space is already taken in the first assigment and it's the same as its value grows. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        newArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> arra<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Otherwise this function is linear O(n) because the new array created into the algorithm will grow proportionally to the size of the given array as an input. The other assignment are not significant as it was happening with the time complexity.</p>","id":"07c170b0-a61d-55f4-bf06-9b2f77680938","frontmatter":{"date":"July, 12, 2019","path":"/blog/intro-to-big-notation","title":"Intro to big notation","excerpt":"There are many ways to reach a solution to solve a given problem in almost all life challenges and web development or coding won't be an exception.","tags":["javascript","big o notation","algorithms","functional programming"],"type":"post","category":"javascript","thumbnail":null,"icon":{"childImageSharp":{"fluid":{"src":"/static/49a21704a5bb82d398913aceb94c63af/48c6d/javascript.png"}}}}}}}